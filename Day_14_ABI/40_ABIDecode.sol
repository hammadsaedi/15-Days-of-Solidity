// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.13;

// abi.encode encodes data into bytes.
// abi.decode decodes bytes back into data.
// Purpose?
// Explained in previous file
// ABI, EVM, Byte Code nad much more
// https://coinsbench.com/solidity-tutorial-all-about-abi-46da8b517e7

contract EncodingDecoding {
    struct Record {
        string name;
        uint[10] num;
    }

    function encode(address _address, uint amount, Record calldata _record) 
        public
        pure
        returns (bytes memory) {
            return abi.encode(_address, amount, _record);
    }

    function decode(bytes calldata data) 
        public
        pure
        returns(
            address _address, 
            uint amount, 
            Record memory _record) {
            (_address, amount, _record) = abi.decode(data, (address, uint, Record));
            // order matters a lot
    }

    // Low Level Intregations 
    // Deep
}

/**
 * Input:
 * 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
 * 19
 * ["Hello Jan", [1,2,3,4,5,6,7,8,9,10]]
 * 
 * Output:
 *  0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddca000000000000000000000000000000000000000000000000000000000000000948656c6c6f204a616e0000000000000000000000000000000000000000000000
 * 
 * Output (Decode):
 * address: _address 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
 * 1:
 * uint256: amount 19
 * 2:
 * tuple(string,uint256[10]): _record 
*/

// Encode and Decode ;) Vice Versa